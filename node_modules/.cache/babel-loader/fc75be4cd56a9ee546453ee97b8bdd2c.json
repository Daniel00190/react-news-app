{"ast":null,"code":"import { useState, useEffect } from \"react\";\n\nconst useFetch = url => {\n  const [data, setData] = useState();\n  useEffect(() => {\n    var urlencoded = new URLSearchParams();\n    var requestOptions = {\n      method: \"GET\",\n      body: urlencoded,\n      redirect: \"follow\"\n    };\n    fetch(url, requestOptions).then(response => response.text()).then(result => setData(result.articles)).catch(error => console.log(\"error\", error));\n    fetchData();\n  }, []);\n  return {\n    data\n  };\n};\n\nexport default useFetch;","map":{"version":3,"sources":["D:/react-news-app/news-api-react/src/subComponents/myFetchHook.js"],"names":["useState","useEffect","useFetch","url","data","setData","urlencoded","URLSearchParams","requestOptions","method","body","redirect","fetch","then","response","text","result","articles","catch","error","console","log","fetchData"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,QAAQ,GAAIC,GAAD,IAAS;AACvB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,EAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACb,QAAIK,UAAU,GAAG,IAAIC,eAAJ,EAAjB;AAEA,QAAIC,cAAc,GAAG;AAClBC,MAAAA,MAAM,EAAE,KADU;AAElBC,MAAAA,IAAI,EAAEJ,UAFY;AAGlBK,MAAAA,QAAQ,EAAE;AAHQ,KAArB;AAMAC,IAAAA,KAAK,CAACT,GAAD,EAAMK,cAAN,CAAL,CACIK,IADJ,CACUC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADvB,EAEIF,IAFJ,CAEUG,MAAD,IAAYX,OAAO,CAACW,MAAM,CAACC,QAAR,CAF5B,EAGIC,KAHJ,CAGWC,KAAD,IAAWC,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAArB,CAHrB;AAIAG,IAAAA,SAAS;AACX,GAdQ,EAcN,EAdM,CAAT;AAgBA,SAAO;AAAElB,IAAAA;AAAF,GAAP;AACF,CApBD;;AAqBA,eAAeF,QAAf","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst useFetch = (url) => {\r\n   const [data, setData] = useState();\r\n\r\n   useEffect(() => {\r\n      var urlencoded = new URLSearchParams();\r\n\r\n      var requestOptions = {\r\n         method: \"GET\",\r\n         body: urlencoded,\r\n         redirect: \"follow\",\r\n      };\r\n\r\n      fetch(url, requestOptions)\r\n         .then((response) => response.text())\r\n         .then((result) => setData(result.articles))\r\n         .catch((error) => console.log(\"error\", error));\r\n      fetchData();\r\n   }, []);\r\n\r\n   return { data };\r\n};\r\nexport default useFetch;\r\n"]},"metadata":{},"sourceType":"module"}