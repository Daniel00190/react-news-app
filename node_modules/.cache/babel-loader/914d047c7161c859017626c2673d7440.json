{"ast":null,"code":"import { useState, useEffect } from 'react';\n\nconst useFetch = (initialUrl, skip = false) => {\n  const [url, updateUrl] = useState(initialUrl);\n  const [data, setData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  useEffect(() => {\n    const fetchData = async () => {\n      if (skip) return;\n      setIsLoading(true);\n\n      try {\n        const response = await fetch(url);\n        const result = await response.json();\n\n        if (response.ok) {\n          setData(result);\n        } else {\n          setHasError(true);\n          setErrorMessage(result);\n        }\n\n        setIsLoading(false);\n      } catch (err) {\n        setHasError(true);\n        setErrorMessage(err.message);\n        setIsLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [url]);\n  return {\n    data,\n    isLoading,\n    hasError,\n    errorMessage,\n    updateUrl\n  };\n};\n\nexport default useFetch;","map":{"version":3,"sources":["C:/Users/User/Desktop/react-news-app/news-api-react/src/components/myFetchHook.js"],"names":["useState","useEffect","useFetch","initialUrl","skip","url","updateUrl","data","setData","isLoading","setIsLoading","hasError","setHasError","errorMessage","setErrorMessage","fetchData","response","fetch","result","json","ok","err","message"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AACA,MAAMC,QAAQ,GAAG,CAACC,UAAD,EAAaC,IAAI,GAAG,KAApB,KAA8B;AAC3C,QAAM,CAACC,GAAD,EAAMC,SAAN,IAAmBN,QAAQ,CAACG,UAAD,CAAjC;AACA,QAAM,CAACI,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACa,YAAD,EAAeC,eAAf,IAAkCd,QAAQ,CAAC,EAAD,CAAhD;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMc,SAAS,GAAG,YAAY;AAC1B,UAAIX,IAAJ,EAAU;AACVM,MAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,UAAI;AACA,cAAMM,QAAQ,GAAG,MAAMC,KAAK,CAACZ,GAAD,CAA5B;AACA,cAAMa,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAArB;;AACA,YAAIH,QAAQ,CAACI,EAAb,EAAiB;AACbZ,UAAAA,OAAO,CAACU,MAAD,CAAP;AACH,SAFD,MAEO;AACHN,UAAAA,WAAW,CAAC,IAAD,CAAX;AACAE,UAAAA,eAAe,CAACI,MAAD,CAAf;AACH;;AACDR,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,OAVD,CAUE,OAAOW,GAAP,EAAY;AACVT,QAAAA,WAAW,CAAC,IAAD,CAAX;AACAE,QAAAA,eAAe,CAACO,GAAG,CAACC,OAAL,CAAf;AACAZ,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACH;AACJ,KAlBD;;AAmBAK,IAAAA,SAAS;AACZ,GArBQ,EAqBN,CAACV,GAAD,CArBM,CAAT;AAsBA,SAAO;AAAEE,IAAAA,IAAF;AAAQE,IAAAA,SAAR;AAAmBE,IAAAA,QAAnB;AAA6BE,IAAAA,YAA7B;AAA2CP,IAAAA;AAA3C,GAAP;AACH,CA7BD;;AA8BA,eAAeJ,QAAf","sourcesContent":["import { useState, useEffect } from 'react'\r\nconst useFetch = (initialUrl, skip = false) => {\r\n    const [url, updateUrl] = useState(initialUrl)\r\n    const [data, setData] = useState(null)\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const [hasError, setHasError] = useState(false)\r\n    const [errorMessage, setErrorMessage] = useState('')\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            if (skip) return\r\n            setIsLoading(true)\r\n            try {\r\n                const response = await fetch(url)\r\n                const result = await response.json()\r\n                if (response.ok) {\r\n                    setData(result)\r\n                } else {\r\n                    setHasError(true)\r\n                    setErrorMessage(result)\r\n                }\r\n                setIsLoading(false)\r\n            } catch (err) {\r\n                setHasError(true)\r\n                setErrorMessage(err.message)\r\n                setIsLoading(false)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [url])\r\n    return { data, isLoading, hasError, errorMessage, updateUrl }\r\n}\r\nexport default useFetch"]},"metadata":{},"sourceType":"module"}