{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\react-news-app\\\\src\\\\components\\\\Temp.js\";\nimport { Icon } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nexport default function Temp() {\n  const [location, setLocation] = useState([]);\n  const [icon, setIcon] = useState([]);\n  const [threeDays, setThreeDays] = useState([]);\n\n  const roundNumbers = number => Math.round((number - 273.15) * 1.8 + 32);\n\n  let unixConvert = unix_timestamp => {\n    var date = new Date(unix_timestamp * 1000);\n    var hours = date.getHours();\n    var minutes = \"0\" + date.getMinutes();\n    var seconds = \"0\" + date.getSeconds();\n    var formattedTime = hours + \":\" + minutes.substr(-2) + \":\" + seconds.substr(-2);\n    return formattedTime;\n  };\n\n  useEffect(() => {\n    getLocation();\n  }, []); //ask for location\n\n  function getLocation() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(showPosition);\n    } else {\n      console.log(\"couldnt set the position\");\n    }\n  } //POST lat and long\n  //set geolocation\n\n\n  function showPosition(position) {\n    let lat = position.coords.latitude;\n    let lon = position.coords.longitude;\n    const locationData = {\n      lat,\n      lon\n    };\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(locationData)\n    };\n    fetch(\"/weather\", options).then(response => response.json()).then(data => {\n      let weatherTemp = ((data.current.temp - 273.15) * 1.8 + 32).toFixed(0);\n      let icon = data.current.weather[0].icon;\n      let daysMap = data.daily;\n      setLocation(weatherTemp);\n      setIcon(icon);\n      setThreeDays(data.daily);\n      console.log(data);\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"temperature\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: icon,\n    alt: \"\",\n    srcSet: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }), location, \" \\xB0F\", \" \"));\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/react-news-app/src/components/Temp.js"],"names":["Icon","React","useEffect","useState","Temp","location","setLocation","icon","setIcon","threeDays","setThreeDays","roundNumbers","number","Math","round","unixConvert","unix_timestamp","date","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","formattedTime","substr","getLocation","navigator","geolocation","getCurrentPosition","showPosition","console","log","position","lat","coords","latitude","lon","longitude","locationData","options","method","headers","body","JSON","stringify","fetch","then","response","json","data","weatherTemp","current","temp","toFixed","weather","daysMap","daily"],"mappings":"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","sourcesContent":["import { Icon } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nexport default function Temp() {\r\n   const [location, setLocation] = useState([]);\r\n   const [icon, setIcon] = useState([]);\r\n   const [threeDays, setThreeDays] = useState([]);\r\n\r\n   const roundNumbers = (number) => Math.round((number - 273.15) * 1.8 + 32);\r\n\r\n   let unixConvert = (unix_timestamp) => {\r\n      var date = new Date(unix_timestamp * 1000);\r\n      var hours = date.getHours();\r\n      var minutes = \"0\" + date.getMinutes();\r\n      var seconds = \"0\" + date.getSeconds();\r\n      var formattedTime =\r\n         hours + \":\" + minutes.substr(-2) + \":\" + seconds.substr(-2);\r\n      return formattedTime;\r\n   };\r\n\r\n   useEffect(() => {\r\n      getLocation();\r\n   }, []);\r\n   //ask for location\r\n   function getLocation() {\r\n      if (navigator.geolocation) {\r\n         navigator.geolocation.getCurrentPosition(showPosition);\r\n      } else {\r\n         console.log(\"couldnt set the position\");\r\n      }\r\n   }\r\n   //POST lat and long\r\n   //set geolocation\r\n\r\n   function showPosition(position) {\r\n      let lat = position.coords.latitude;\r\n      let lon = position.coords.longitude;\r\n      const locationData = { lat, lon };\r\n      const options = {\r\n         method: \"POST\",\r\n         headers: {\r\n            \"Content-Type\": \"application/json\",\r\n         },\r\n         body: JSON.stringify(locationData),\r\n      };\r\n      fetch(\"/weather\", options)\r\n         .then((response) => response.json())\r\n         .then((data) => {\r\n            let weatherTemp = ((data.current.temp - 273.15) * 1.8 + 32).toFixed(\r\n               0\r\n            );\r\n            let icon = data.current.weather[0].icon;\r\n            let daysMap = data.daily;\r\n            setLocation(weatherTemp);\r\n            setIcon(icon);\r\n            setThreeDays(data.daily);\r\n            console.log(data);\r\n         });\r\n   }\r\n\r\n   return (\r\n      <div>\r\n         <div className=\"temperature\">\r\n            <img src={icon} alt=\"\" srcSet=\"\" />\r\n            {location} Â°F{\" \"}\r\n         </div>\r\n      </div>\r\n   );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}