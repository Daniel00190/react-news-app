{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\react-news-app\\\\news-api-react\\\\src\\\\components\\\\Temp.js\";\nimport React, { useEffect, useState } from \"react\";\nexport default function Temp() {\n  const [location, setLocation] = useState([]);\n  const [icon, setIcon] = useState([]);\n  const [threeDays, setThreeDays] = useState([]);\n\n  const roundNumbers = number => Math.round((number - 273.15) * 1.8 + 32);\n\n  const unixConvert = unix_timestamp => {\n    var date = new Date(unix_timestamp * 1000); // Hours part from the timestamp\n\n    var hours = date.getHours(); // Minutes part from the timestamp\n\n    var minutes = \"0\" + date.getMinutes(); // Seconds part from the timestamp\n\n    var seconds = \"0\" + date.getSeconds(); // Will display time in 10:30:23 format\n\n    var formattedTime = hours + \":\" + minutes.substr(-2) + \":\" + seconds.substr(-2);\n    console.log(formattedTime);\n  };\n\n  useEffect(() => {\n    getLocation();\n  }, []); //ask for location\n\n  function getLocation() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(showPosition);\n    } else {\n      console.log(\"couldnt set the position\");\n    }\n  } //POST lat and long\n  //set geolocation\n\n\n  function showPosition(position) {\n    let lat = position.coords.latitude;\n    let lon = position.coords.longitude;\n    const locationData = {\n      lat,\n      lon\n    };\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(locationData)\n    };\n    fetch(\"/weather\", options).then(response => response.json()).then(data => {\n      let weatherTemp = ((data.current.temp - 273.15) * 1.8 + 32).toFixed(0);\n      let iconURL = data.current.weather[0].icon;\n      let daysMap = data.daily;\n      setLocation(weatherTemp);\n      setIcon(iconURL);\n      setThreeDays(data.daily);\n      console.log(data);\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"temperature\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: `http://openweathermap.org/img/wn/${icon}.png`,\n    alt: \"\",\n    srcSet: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }), location, \" \\xB0F\", \" \"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"blurBack\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"popup\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 10\n    }\n  }, threeDays.slice(0, 3).map(day => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"popup_inner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 16\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"topInfo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 22\n    }\n  }, \"Miami\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"theDate\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 22\n    }\n  }, unixConvert(day.dt)), /*#__PURE__*/React.createElement(\"img\", {\n    src: `http://openweathermap.org/img/wn/${day.weather[0].icon}.png`,\n    alt: \"\",\n    srcSet: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 22\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 22\n    }\n  }, day.weather[0].description), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"theTemp\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 22\n    }\n  }, roundNumbers(day.temp.day), \" \\xB0F\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bottomInfo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"humidity\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 22\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 25\n    }\n  }, \"humidity:\", day.humidity, \"%\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 25\n    }\n  }, \"pressure:\", day.pressure, \" hPa\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 25\n    }\n  }, \"wind:\", day.wind_speed, \" m/s\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"timeofday\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 22\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 25\n    }\n  }, \"morning:\", roundNumbers(day.temp.morn), \" \\xB0F\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 25\n    }\n  }, \"evening:\", roundNumbers(day.temp.eve), \" \\xB0F\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 25\n    }\n  }, \"night:\", roundNumbers(day.temp.night), \" \\xB0F\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sunrise\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 22\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 28\n    }\n  }, \"sunrise\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 28\n    }\n  }, day.sunrise, \" AM\")), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 28\n    }\n  }, \"sunset\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 28\n    }\n  }, day.sunset, \" PM\"))))))));\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/react-news-app/news-api-react/src/components/Temp.js"],"names":["React","useEffect","useState","Temp","location","setLocation","icon","setIcon","threeDays","setThreeDays","roundNumbers","number","Math","round","unixConvert","unix_timestamp","date","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","formattedTime","substr","console","log","getLocation","navigator","geolocation","getCurrentPosition","showPosition","position","lat","coords","latitude","lon","longitude","locationData","options","method","headers","body","JSON","stringify","fetch","then","response","json","data","weatherTemp","current","temp","toFixed","iconURL","weather","daysMap","daily","slice","map","day","dt","description","humidity","pressure","wind_speed","morn","eve","night","sunrise","sunset"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nexport default function Temp() {\r\n   const [location, setLocation] = useState([]);\r\n   const [icon, setIcon] = useState([]);\r\n   const [threeDays, setThreeDays] = useState([]);\r\n\r\n   const roundNumbers = (number) => Math.round((number - 273.15) * 1.8 + 32);\r\n\r\n   const unixConvert = (unix_timestamp) => {\r\n      var date = new Date(unix_timestamp * 1000);\r\n      // Hours part from the timestamp\r\n      var hours = date.getHours();\r\n      // Minutes part from the timestamp\r\n      var minutes = \"0\" + date.getMinutes();\r\n      // Seconds part from the timestamp\r\n      var seconds = \"0\" + date.getSeconds();\r\n\r\n      // Will display time in 10:30:23 format\r\n      var formattedTime =\r\n         hours + \":\" + minutes.substr(-2) + \":\" + seconds.substr(-2);\r\n\r\n      console.log(formattedTime);\r\n   };\r\n\r\n   useEffect(() => {\r\n      getLocation();\r\n   }, []);\r\n   //ask for location\r\n   function getLocation() {\r\n      if (navigator.geolocation) {\r\n         navigator.geolocation.getCurrentPosition(showPosition);\r\n      } else {\r\n         console.log(\"couldnt set the position\");\r\n      }\r\n   }\r\n   //POST lat and long\r\n   //set geolocation\r\n   function showPosition(position) {\r\n      let lat = position.coords.latitude;\r\n      let lon = position.coords.longitude;\r\n      const locationData = { lat, lon };\r\n      const options = {\r\n         method: \"POST\",\r\n         headers: {\r\n            \"Content-Type\": \"application/json\",\r\n         },\r\n         body: JSON.stringify(locationData),\r\n      };\r\n      fetch(\"/weather\", options)\r\n         .then((response) => response.json())\r\n         .then((data) => {\r\n            let weatherTemp = ((data.current.temp - 273.15) * 1.8 + 32).toFixed(\r\n               0\r\n            );\r\n            let iconURL = data.current.weather[0].icon;\r\n            let daysMap = data.daily;\r\n            setLocation(weatherTemp);\r\n            setIcon(iconURL);\r\n            setThreeDays(data.daily);\r\n            console.log(data);\r\n         });\r\n   }\r\n\r\n   return (\r\n      <div>\r\n         <div className=\"temperature\">\r\n            <img\r\n               src={`http://openweathermap.org/img/wn/${icon}.png`}\r\n               alt=\"\"\r\n               srcSet=\"\"\r\n            />\r\n            {location} °F{\" \"}\r\n         </div>\r\n         <div className=\"blurBack\"></div>\r\n         <div className=\"popup\">\r\n            {threeDays.slice(0, 3).map((day) => (\r\n               <div className=\"popup_inner\">\r\n                  <div className=\"topInfo\">\r\n                     <div>Miami</div>\r\n                     <div className=\"theDate\">{unixConvert(day.dt)}</div>\r\n\r\n                     <img\r\n                        src={`http://openweathermap.org/img/wn/${day.weather[0].icon}.png`}\r\n                        alt=\"\"\r\n                        srcSet=\"\"\r\n                     />\r\n                     <div>{day.weather[0].description}</div>\r\n                     <div className=\"theTemp\">\r\n                        {roundNumbers(day.temp.day)} °F\r\n                     </div>\r\n                  </div>\r\n                  <div className=\"bottomInfo\">\r\n                     <div className=\"humidity\">\r\n                        <div>\r\n                           humidity:\r\n                           {day.humidity}%\r\n                        </div>\r\n                        <div>\r\n                           pressure:\r\n                           {day.pressure} hPa\r\n                        </div>\r\n                        <div>\r\n                           wind:\r\n                           {day.wind_speed} m/s\r\n                        </div>\r\n                     </div>\r\n                     <div className=\"timeofday\">\r\n                        <div>\r\n                           morning:\r\n                           {roundNumbers(day.temp.morn)} °F\r\n                        </div>\r\n                        <div>\r\n                           evening:\r\n                           {roundNumbers(day.temp.eve)} °F\r\n                        </div>\r\n                        <div>\r\n                           night:\r\n                           {roundNumbers(day.temp.night)} °F\r\n                        </div>\r\n                     </div>\r\n                     <div className=\"sunrise\">\r\n                        <div>\r\n                           <div>sunrise</div>\r\n                           <div>{day.sunrise} AM</div>\r\n                        </div>\r\n                        <div>\r\n                           <div>sunset</div>\r\n                           <div>{day.sunset} PM</div>\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n            ))}\r\n         </div>\r\n      </div>\r\n   );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}