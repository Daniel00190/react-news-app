{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\react-news-app\\\\news-api-react\\\\src\\\\components\\\\Temp.js\";\nimport React, { useEffect, useState } from \"react\";\nexport default function Temp() {\n  const [location, setLocation] = useState([]);\n  const [icon, setIcon] = useState([]);\n  useEffect(() => {\n    getLocation();\n  }, []); //ask for location\n\n  function getLocation() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(showPosition);\n    } else {\n      console.log(\"couldnt set the position\");\n    }\n  } //POST lat and long\n  //set geolocation\n\n\n  function showPosition(position) {\n    let lat = position.coords.latitude;\n    let lon = position.coords.longitude;\n    const locationData = {\n      lat,\n      lon\n    };\n    const options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(locationData)\n    };\n    fetch('/weather', options).then(response => response.json()).then(data => {\n      let weatherTemp = ((data.main.temp - 273.15) * 1.8 + 32).toFixed(0);\n      let iconURL = data.weather[0].icon;\n      setLocation(weatherTemp);\n      setIcon(iconURL);\n      console.log(data);\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"temperature\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: `http://openweathermap.org/img/wn/${icon}.png`,\n    alt: \"\",\n    srcSet: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 40\n    }\n  }), \"\\\" \\\"\", location, \" \\xB0F \");\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/react-news-app/news-api-react/src/components/Temp.js"],"names":["React","useEffect","useState","Temp","location","setLocation","icon","setIcon","getLocation","navigator","geolocation","getCurrentPosition","showPosition","console","log","position","lat","coords","latitude","lon","longitude","locationData","options","method","headers","body","JSON","stringify","fetch","then","response","json","data","weatherTemp","main","temp","toFixed","iconURL","weather"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,eAAe,SAASC,IAAT,GAAgB;AAC5B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BH,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACI,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,EAAD,CAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACbO,IAAAA,WAAW;AACb,GAFQ,EAEN,EAFM,CAAT,CAJ4B,CAO5B;;AACA,WAASA,WAAT,GAAuB;AACpB,QAAIC,SAAS,CAACC,WAAd,EAA2B;AACxBD,MAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyCC,YAAzC;AACF,KAFD,MAEO;AACJC,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACF;AACH,GAd2B,CAe5B;AACA;;;AACA,WAASF,YAAT,CAAsBG,QAAtB,EAAgC;AAC7B,QAAIC,GAAG,GAAGD,QAAQ,CAACE,MAAT,CAAgBC,QAA1B;AACA,QAAIC,GAAG,GAAGJ,QAAQ,CAACE,MAAT,CAAgBG,SAA1B;AACA,UAAMC,YAAY,GAAG;AAAEL,MAAAA,GAAF;AAAOG,MAAAA;AAAP,KAArB;AACA,UAAMG,OAAO,GAAG;AACbC,MAAAA,MAAM,EAAE,MADK;AAEbC,MAAAA,OAAO,EAAE;AACN,wBAAgB;AADV,OAFI;AAKbC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,YAAf;AALO,KAAhB;AAOAO,IAAAA,KAAK,CAAC,UAAD,EAAaN,OAAb,CAAL,CACIO,IADJ,CACUC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADvB,EAEIF,IAFJ,CAEUG,IAAD,IAAU;AACb,UAAIC,WAAW,GAAG,CAAE,CAACD,IAAI,CAACE,IAAL,CAAUC,IAAV,GAAiB,MAAlB,IAA4B,GAA7B,GAAoC,EAArC,EAAyCC,OAAzC,CAAiD,CAAjD,CAAlB;AACA,UAAIC,OAAO,GAAGL,IAAI,CAACM,OAAL,CAAa,CAAb,EAAgBhC,IAA9B;AACAD,MAAAA,WAAW,CAAC4B,WAAD,CAAX;AACA1B,MAAAA,OAAO,CAAC8B,OAAD,CAAP;AACAxB,MAAAA,OAAO,CAACC,GAAR,CAAYkB,IAAZ;AACF,KARJ;AASF;;AAED,sBAAO;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA6B;AAAK,IAAA,GAAG,EAAG,oCAAmC1B,IAAK,MAAnD;AAA0D,IAAA,GAAG,EAAC,EAA9D;AAAiE,IAAA,MAAM,EAAC,EAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA7B,WAA8GF,QAA9G,YAAP;AACF","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nexport default function Temp() {\r\n   const [location, setLocation] = useState([]);\r\n   const [icon, setIcon] = useState([]);\r\n\r\n   useEffect(() => {\r\n      getLocation();\r\n   }, []);\r\n   //ask for location\r\n   function getLocation() {\r\n      if (navigator.geolocation) {\r\n         navigator.geolocation.getCurrentPosition(showPosition);\r\n      } else {\r\n         console.log(\"couldnt set the position\");\r\n      }\r\n   }\r\n   //POST lat and long\r\n   //set geolocation\r\n   function showPosition(position) {\r\n      let lat = position.coords.latitude;\r\n      let lon = position.coords.longitude;\r\n      const locationData = { lat, lon };\r\n      const options = {\r\n         method: 'POST',\r\n         headers: {\r\n            'Content-Type': 'application/json'\r\n         },\r\n         body: JSON.stringify(locationData)\r\n      };\r\n      fetch('/weather', options)\r\n         .then((response) => response.json())\r\n         .then((data) => {\r\n            let weatherTemp = (((data.main.temp - 273.15) * 1.8) + 32).toFixed(0)\r\n            let iconURL = data.weather[0].icon\r\n            setLocation(weatherTemp)\r\n            setIcon(iconURL)\r\n            console.log(data);\r\n         })\r\n   }\r\n\r\n   return <div className=\"temperature\"><img src={`http://openweathermap.org/img/wn/${icon}.png`} alt=\"\" srcSet=\"\" />\" \"{location} Â°F </div>;\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}