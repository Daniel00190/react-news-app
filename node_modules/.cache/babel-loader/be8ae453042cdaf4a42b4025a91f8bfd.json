{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\react-news-app\\\\news-api-react\\\\src\\\\components\\\\Temp.js\";\nimport React, { useEffect, useState } from \"react\";\nexport default function Temp() {\n  const [location, setLocation] = useState([]);\n  const [icon, setIcon] = useState([]);\n  useEffect(() => {\n    getLocation();\n  }, [showPosition]); //ask for location\n\n  function getLocation() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(showPosition);\n    } else {\n      console.log(\"couldnt set the position\");\n    }\n  } //POST lat and long\n  //set geolocation\n\n\n  function showPosition(position) {\n    let lat = position.coords.latitude;\n    let lon = position.coords.longitude;\n    const locationData = {\n      lat,\n      lon\n    };\n    const options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(locationData)\n    };\n    fetch('/weather', options);\n  }\n\n  fetch('/weather').then(response => response.json()).then(data => {\n    console.log(data);\n    let weatherTemp = data.current.temp_f.toFixed(0);\n    let iconURL = data.current.condition.icon;\n    setLocation(weatherTemp);\n    setIcon(iconURL);\n    console.log(data);\n  }).catch(err => {\n    console.log(\"error getting weather data from server\");\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"temperature\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: icon,\n    alt: \"\",\n    srcSet: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 40\n    }\n  }), location, \" \\xB0F\");\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/react-news-app/news-api-react/src/components/Temp.js"],"names":["React","useEffect","useState","Temp","location","setLocation","icon","setIcon","getLocation","showPosition","navigator","geolocation","getCurrentPosition","console","log","position","lat","coords","latitude","lon","longitude","locationData","options","method","headers","body","JSON","stringify","fetch","then","response","json","data","weatherTemp","current","temp_f","toFixed","iconURL","condition","catch","err"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,eAAe,SAASC,IAAT,GAAgB;AAC5B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BH,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACI,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,EAAD,CAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACbO,IAAAA,WAAW;AACb,GAFQ,EAEN,CAACC,YAAD,CAFM,CAAT,CAJ4B,CAO5B;;AACA,WAASD,WAAT,GAAuB;AACpB,QAAIE,SAAS,CAACC,WAAd,EAA2B;AACxBD,MAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyCH,YAAzC;AACF,KAFD,MAEO;AACJI,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACF;AACH,GAd2B,CAe5B;AACA;;;AACA,WAASL,YAAT,CAAsBM,QAAtB,EAAgC;AAC7B,QAAIC,GAAG,GAAGD,QAAQ,CAACE,MAAT,CAAgBC,QAA1B;AACA,QAAIC,GAAG,GAAGJ,QAAQ,CAACE,MAAT,CAAgBG,SAA1B;AACA,UAAMC,YAAY,GAAG;AAAEL,MAAAA,GAAF;AAAOG,MAAAA;AAAP,KAArB;AACA,UAAMG,OAAO,GAAG;AACbC,MAAAA,MAAM,EAAE,MADK;AAEbC,MAAAA,OAAO,EAAE;AACN,wBAAgB;AADV,OAFI;AAKbC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,YAAf;AALO,KAAhB;AAOAO,IAAAA,KAAK,CAAC,UAAD,EAAaN,OAAb,CAAL;AAEF;;AAEDM,EAAAA,KAAK,CAAC,UAAD,CAAL,CACIC,IADJ,CACUC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADvB,EAEIF,IAFJ,CAEUG,IAAD,IAAU;AACbnB,IAAAA,OAAO,CAACC,GAAR,CAAYkB,IAAZ;AACA,QAAIC,WAAW,GAAID,IAAI,CAACE,OAAL,CAAaC,MAAd,CAAsBC,OAAtB,CAA8B,CAA9B,CAAlB;AACA,QAAIC,OAAO,GAAGL,IAAI,CAACE,OAAL,CAAaI,SAAb,CAAuBhC,IAArC;AACAD,IAAAA,WAAW,CAAC4B,WAAD,CAAX;AACA1B,IAAAA,OAAO,CAAC8B,OAAD,CAAP;AACAxB,IAAAA,OAAO,CAACC,GAAR,CAAYkB,IAAZ;AACF,GATJ,EAUIO,KAVJ,CAUWC,GAAD,IAAS;AACb3B,IAAAA,OAAO,CAACC,GAAR,CAAY,wCAAZ;AACF,GAZJ;AAaA,sBAAO;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA6B;AAAK,IAAA,GAAG,EAAER,IAAV;AAAgB,IAAA,GAAG,EAAC,EAApB;AAAuB,IAAA,MAAM,EAAC,EAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA7B,EAAiEF,QAAjE,WAAP;AACF","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nexport default function Temp() {\r\n   const [location, setLocation] = useState([]);\r\n   const [icon, setIcon] = useState([]);\r\n\r\n   useEffect(() => {\r\n      getLocation();\r\n   }, [showPosition]);\r\n   //ask for location\r\n   function getLocation() {\r\n      if (navigator.geolocation) {\r\n         navigator.geolocation.getCurrentPosition(showPosition);\r\n      } else {\r\n         console.log(\"couldnt set the position\");\r\n      }\r\n   }\r\n   //POST lat and long\r\n   //set geolocation\r\n   function showPosition(position) {\r\n      let lat = position.coords.latitude;\r\n      let lon = position.coords.longitude;\r\n      const locationData = { lat, lon };\r\n      const options = {\r\n         method: 'POST',\r\n         headers: {\r\n            'Content-Type': 'application/json'\r\n         },\r\n         body: JSON.stringify(locationData)\r\n      };\r\n      fetch('/weather', options)\r\n\r\n   }\r\n\r\n   fetch('/weather')\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n         console.log(data)\r\n         let weatherTemp = (data.current.temp_f).toFixed(0)\r\n         let iconURL = data.current.condition.icon\r\n         setLocation(weatherTemp)\r\n         setIcon(iconURL)\r\n         console.log(data);\r\n      })\r\n      .catch((err) => {\r\n         console.log(\"error getting weather data from server\");\r\n      });\r\n   return <div className=\"temperature\"><img src={icon} alt=\"\" srcSet=\"\" />{location} Â°F</div>;\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}